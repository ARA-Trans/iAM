<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// WARNING: This file was automatically generated from a T4 text template at the
// following moment in time: <#= DateTimeOffset.Now #>. Any changes you make to
// this file will be lost when this file is regenerated from the template
// source.

using System.Collections.Generic;
using System.Linq;

namespace AppliedResearchAssociates
{
    partial class Zip
    {
<#
foreach (var arity in Enumerable.Range(2, 7))
{
    var labelNumbers = Enumerable.Range(1, arity).ToList();
    var typeParams = string.Join(", ", labelNumbers.Select(n => $"T{n}"));
    var seqParams = string.Join(", ", labelNumbers.Select(n => $"IEnumerable<T{n}> sequence{n}"));
    var defaultParams = string.Join(", ", labelNumbers.Select(n => $"T{n} default{n} = default"));
    var longParams = seqParams + ", " + defaultParams;
    var moveNextExprsLong = string.Join(" | ", labelNumbers.Select(n => $"(hasCurrent{n} = enumerator{n}.MoveNext())"));
    var moveNextExprsShort = string.Join(" & ", labelNumbers.Select(n => $"enumerator{n}.MoveNext()"));
    var moveNextExprsStrict = string.Join(", ", labelNumbers.Select(n => $"enumerator{n}.MoveNext()"));
    var currentExprs = string.Join(", ", labelNumbers.Select(n => $"enumerator{n}.Current"));
    var currentExprsLong = string.Join(", ", labelNumbers.Select(n => $"hasCurrent{n} ? enumerator{n}.Current : default{n}"));
    var hasCurrentDecls = string.Join(", ", labelNumbers.Select(n => $"hasCurrent{n}"));
#>
        public static IEnumerable<(<#= typeParams #>)> Long<<#= typeParams #>>(<#= longParams #>)
        {
<#
    foreach (var n in labelNumbers)
    {
#>
            using (var enumerator<#= n #> = sequence<#= n #>.GetEnumerator())
<#
    }
#>
            {
                bool <#= hasCurrentDecls #>;
                while (<#= moveNextExprsLong #>)
                {
                    yield return (<#= currentExprsLong #>);
                }
            }
        }

        public static IEnumerable<(<#= typeParams #>)> Short<<#= typeParams #>>(<#= seqParams #>)
        {
<#
    foreach (var n in labelNumbers)
    {
#>
            using (var enumerator<#= n #> = sequence<#= n #>.GetEnumerator())
<#
    }
#>
            {
                while (<#= moveNextExprsShort #>)
                {
                    yield return (<#= currentExprs #>);
                }
            }
        }

        public static IEnumerable<(<#= typeParams #>)> Strict<<#= typeParams #>>(<#= seqParams #>)
        {
<#
    foreach (var n in labelNumbers)
    {
#>
            using (var enumerator<#= n #> = sequence<#= n #>.GetEnumerator())
<#
    }
#>
            {
                while (Static.Distinct(<#= moveNextExprsStrict #>).Single())
                {
                    yield return (<#= currentExprs #>);
                }
            }
        }

<#
}
#>
    }
}

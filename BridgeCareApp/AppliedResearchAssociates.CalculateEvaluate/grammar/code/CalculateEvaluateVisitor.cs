//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CalculateEvaluate.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AppliedResearchAssociates.CalculateEvaluate {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="CalculateEvaluateParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface ICalculateEvaluateVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>Calculation</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCalculation([NotNull] CalculateEvaluateParser.CalculationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Evaluation</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEvaluation([NotNull] CalculateEvaluateParser.EvaluationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Multiplication</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplication([NotNull] CalculateEvaluateParser.MultiplicationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Addition</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddition([NotNull] CalculateEvaluateParser.AdditionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Subtraction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubtraction([NotNull] CalculateEvaluateParser.SubtractionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Invocation</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInvocation([NotNull] CalculateEvaluateParser.InvocationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Negation</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNegation([NotNull] CalculateEvaluateParser.NegationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NumericLiteral</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumericLiteral([NotNull] CalculateEvaluateParser.NumericLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParameterReference</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameterReference([NotNull] CalculateEvaluateParser.ParameterReferenceContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Grouping</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGrouping([NotNull] CalculateEvaluateParser.GroupingContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Division</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDivision([NotNull] CalculateEvaluateParser.DivisionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CalculateEvaluateParser.eval"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEval([NotNull] CalculateEvaluateParser.EvalContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CalculateEvaluateParser.args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgs([NotNull] CalculateEvaluateParser.ArgsContext context);
}
} // namespace AppliedResearchAssociates.CalculateEvaluate

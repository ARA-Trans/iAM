//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CalculateEvaluateParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AppliedResearchAssociates.CalculateEvaluate {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="CalculateEvaluateParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface ICalculateEvaluateParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>calculationRoot</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCalculationRoot([NotNull] CalculateEvaluateParser.CalculationRootContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>calculationRoot</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCalculationRoot([NotNull] CalculateEvaluateParser.CalculationRootContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>evaluationRoot</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEvaluationRoot([NotNull] CalculateEvaluateParser.EvaluationRootContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>evaluationRoot</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEvaluationRoot([NotNull] CalculateEvaluateParser.EvaluationRootContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>invocation</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInvocation([NotNull] CalculateEvaluateParser.InvocationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>invocation</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInvocation([NotNull] CalculateEvaluateParser.InvocationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>negation</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNegation([NotNull] CalculateEvaluateParser.NegationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>negation</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNegation([NotNull] CalculateEvaluateParser.NegationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicationOrDivision</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicationOrDivision([NotNull] CalculateEvaluateParser.MultiplicationOrDivisionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicationOrDivision</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicationOrDivision([NotNull] CalculateEvaluateParser.MultiplicationOrDivisionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>additionOrSubtraction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditionOrSubtraction([NotNull] CalculateEvaluateParser.AdditionOrSubtractionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>additionOrSubtraction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditionOrSubtraction([NotNull] CalculateEvaluateParser.AdditionOrSubtractionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>calculationGrouping</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCalculationGrouping([NotNull] CalculateEvaluateParser.CalculationGroupingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>calculationGrouping</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCalculationGrouping([NotNull] CalculateEvaluateParser.CalculationGroupingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numberReference</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberReference([NotNull] CalculateEvaluateParser.NumberReferenceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numberReference</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberReference([NotNull] CalculateEvaluateParser.NumberReferenceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numberParameterReference</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberParameterReference([NotNull] CalculateEvaluateParser.NumberParameterReferenceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numberParameterReference</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberParameterReference([NotNull] CalculateEvaluateParser.NumberParameterReferenceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numberLiteral</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberLiteral([NotNull] CalculateEvaluateParser.NumberLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numberLiteral</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberLiteral([NotNull] CalculateEvaluateParser.NumberLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculateEvaluateParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArguments([NotNull] CalculateEvaluateParser.ArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculateEvaluateParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArguments([NotNull] CalculateEvaluateParser.ArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>equal</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqual([NotNull] CalculateEvaluateParser.EqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>equal</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqual([NotNull] CalculateEvaluateParser.EqualContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>logicalConjunction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalConjunction([NotNull] CalculateEvaluateParser.LogicalConjunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalConjunction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalConjunction([NotNull] CalculateEvaluateParser.LogicalConjunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThan</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThan([NotNull] CalculateEvaluateParser.LessThanContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThan</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThan([NotNull] CalculateEvaluateParser.LessThanContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanOrEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanOrEqual([NotNull] CalculateEvaluateParser.LessThanOrEqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanOrEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanOrEqual([NotNull] CalculateEvaluateParser.LessThanOrEqualContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>evaluationGrouping</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEvaluationGrouping([NotNull] CalculateEvaluateParser.EvaluationGroupingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>evaluationGrouping</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEvaluationGrouping([NotNull] CalculateEvaluateParser.EvaluationGroupingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>logicalDisjunction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalDisjunction([NotNull] CalculateEvaluateParser.LogicalDisjunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalDisjunction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalDisjunction([NotNull] CalculateEvaluateParser.LogicalDisjunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotEqual([NotNull] CalculateEvaluateParser.NotEqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotEqual([NotNull] CalculateEvaluateParser.NotEqualContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanOrEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanOrEqual([NotNull] CalculateEvaluateParser.GreaterThanOrEqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanOrEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanOrEqual([NotNull] CalculateEvaluateParser.GreaterThanOrEqualContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThan</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThan([NotNull] CalculateEvaluateParser.GreaterThanContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThan</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThan([NotNull] CalculateEvaluateParser.GreaterThanContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculateEvaluateParser.parameterReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterReference([NotNull] CalculateEvaluateParser.ParameterReferenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculateEvaluateParser.parameterReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterReference([NotNull] CalculateEvaluateParser.ParameterReferenceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculateEvaluateParser.comparisonOperand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonOperand([NotNull] CalculateEvaluateParser.ComparisonOperandContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculateEvaluateParser.comparisonOperand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonOperand([NotNull] CalculateEvaluateParser.ComparisonOperandContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculateEvaluateParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] CalculateEvaluateParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculateEvaluateParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] CalculateEvaluateParser.LiteralContext context);
}
} // namespace AppliedResearchAssociates.CalculateEvaluate

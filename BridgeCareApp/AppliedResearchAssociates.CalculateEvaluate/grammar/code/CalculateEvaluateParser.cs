//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CalculateEvaluate.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AppliedResearchAssociates.CalculateEvaluate {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculateEvaluateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, NUMBER=17, 
		AND=18, OR=19, IDENTIFIER=20, WHITESPACE=21;
	public const int
		RULE_root = 0, RULE_calculation = 1, RULE_arguments = 2, RULE_evaluation = 3, 
		RULE_evaluationLiteral = 4, RULE_parameterReference = 5;
	public static readonly string[] ruleNames = {
		"root", "calculation", "arguments", "evaluation", "evaluationLiteral", 
		"parameterReference"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'-'", "'*'", "'/'", "'+'", "','", "'='", "'<>'", 
		"'<'", "'<='", "'>='", "'>'", "'|'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "NUMBER", "AND", "OR", "IDENTIFIER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CalculateEvaluate.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculateEvaluateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculateEvaluateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculateEvaluateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
	 
		public RootContext() { }
		public virtual void CopyFrom(RootContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CalculationRootContext : RootContext {
		public CalculationContext calculation() {
			return GetRuleContext<CalculationContext>(0);
		}
		public CalculationRootContext(RootContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterCalculationRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitCalculationRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalculationRoot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EvaluationRootContext : RootContext {
		public EvaluationContext evaluation() {
			return GetRuleContext<EvaluationContext>(0);
		}
		public EvaluationRootContext(RootContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterEvaluationRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitEvaluationRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluationRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			State = 14;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new CalculationRootContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 12; calculation(0);
				}
				break;
			case 2:
				_localctx = new EvaluationRootContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 13; evaluation(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalculationContext : ParserRuleContext {
		public CalculationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calculation; } }
	 
		public CalculationContext() { }
		public virtual void CopyFrom(CalculationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivisionContext : CalculationContext {
		public CalculationContext left;
		public CalculationContext right;
		public CalculationContext[] calculation() {
			return GetRuleContexts<CalculationContext>();
		}
		public CalculationContext calculation(int i) {
			return GetRuleContext<CalculationContext>(i);
		}
		public DivisionContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterDivision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitDivision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvocationContext : CalculationContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CalculateEvaluateParser.IDENTIFIER, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public InvocationContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegationContext : CalculationContext {
		public CalculationContext calculation() {
			return GetRuleContext<CalculationContext>(0);
		}
		public NegationContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantReferenceContext : CalculationContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CalculateEvaluateParser.IDENTIFIER, 0); }
		public ConstantReferenceContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterConstantReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitConstantReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantReference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionContext : CalculationContext {
		public CalculationContext left;
		public CalculationContext right;
		public CalculationContext[] calculation() {
			return GetRuleContexts<CalculationContext>();
		}
		public CalculationContext calculation(int i) {
			return GetRuleContext<CalculationContext>(i);
		}
		public SubtractionContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterSubtraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitSubtraction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationContext : CalculationContext {
		public CalculationContext left;
		public CalculationContext right;
		public CalculationContext[] calculation() {
			return GetRuleContexts<CalculationContext>();
		}
		public CalculationContext calculation(int i) {
			return GetRuleContext<CalculationContext>(i);
		}
		public MultiplicationContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CalculationGroupingContext : CalculationContext {
		public CalculationContext calculation() {
			return GetRuleContext<CalculationContext>(0);
		}
		public CalculationGroupingContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterCalculationGrouping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitCalculationGrouping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalculationGrouping(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberParameterReferenceContext : CalculationContext {
		public ParameterReferenceContext parameterReference() {
			return GetRuleContext<ParameterReferenceContext>(0);
		}
		public NumberParameterReferenceContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterNumberParameterReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitNumberParameterReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberParameterReference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberLiteralContext : CalculationContext {
		public ITerminalNode NUMBER() { return GetToken(CalculateEvaluateParser.NUMBER, 0); }
		public NumberLiteralContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionContext : CalculationContext {
		public CalculationContext left;
		public CalculationContext right;
		public CalculationContext[] calculation() {
			return GetRuleContexts<CalculationContext>();
		}
		public CalculationContext calculation(int i) {
			return GetRuleContext<CalculationContext>(i);
		}
		public AdditionContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalculationContext calculation() {
		return calculation(0);
	}

	private CalculationContext calculation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CalculationContext _localctx = new CalculationContext(Context, _parentState);
		CalculationContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_calculation, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				_localctx = new InvocationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 17; Match(IDENTIFIER);
				State = 18; Match(T__0);
				State = 19; arguments();
				State = 20; Match(T__1);
				}
				break;
			case 2:
				{
				_localctx = new NegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 22; Match(T__2);
				State = 23; calculation(9);
				}
				break;
			case 3:
				{
				_localctx = new NumberLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 24; Match(NUMBER);
				}
				break;
			case 4:
				{
				_localctx = new ConstantReferenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 25; Match(IDENTIFIER);
				}
				break;
			case 5:
				{
				_localctx = new NumberParameterReferenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26; parameterReference();
				}
				break;
			case 6:
				{
				_localctx = new CalculationGroupingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 27; Match(T__0);
				State = 28; calculation(0);
				State = 29; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 47;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 45;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(new CalculationContext(_parentctx, _parentState));
						((MultiplicationContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_calculation);
						State = 33;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 34; Match(T__3);
						State = 35; ((MultiplicationContext)_localctx).right = calculation(9);
						}
						break;
					case 2:
						{
						_localctx = new DivisionContext(new CalculationContext(_parentctx, _parentState));
						((DivisionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_calculation);
						State = 36;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 37; Match(T__4);
						State = 38; ((DivisionContext)_localctx).right = calculation(8);
						}
						break;
					case 3:
						{
						_localctx = new AdditionContext(new CalculationContext(_parentctx, _parentState));
						((AdditionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_calculation);
						State = 39;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 40; Match(T__5);
						State = 41; ((AdditionContext)_localctx).right = calculation(7);
						}
						break;
					case 4:
						{
						_localctx = new SubtractionContext(new CalculationContext(_parentctx, _parentState));
						((SubtractionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_calculation);
						State = 42;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 43; Match(T__2);
						State = 44; ((SubtractionContext)_localctx).right = calculation(6);
						}
						break;
					}
					} 
				}
				State = 49;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public CalculationContext[] calculation() {
			return GetRuleContexts<CalculationContext>();
		}
		public CalculationContext calculation(int i) {
			return GetRuleContext<CalculationContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 4, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; calculation(0);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 51; Match(T__6);
				State = 52; calculation(0);
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluationContext : ParserRuleContext {
		public EvaluationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluation; } }
	 
		public EvaluationContext() { }
		public virtual void CopyFrom(EvaluationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EqualContext : EvaluationContext {
		public ParameterReferenceContext parameterReference() {
			return GetRuleContext<ParameterReferenceContext>(0);
		}
		public EvaluationLiteralContext evaluationLiteral() {
			return GetRuleContext<EvaluationLiteralContext>(0);
		}
		public EqualContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalConjunctionContext : EvaluationContext {
		public EvaluationContext left;
		public EvaluationContext right;
		public ITerminalNode AND() { return GetToken(CalculateEvaluateParser.AND, 0); }
		public EvaluationContext[] evaluation() {
			return GetRuleContexts<EvaluationContext>();
		}
		public EvaluationContext evaluation(int i) {
			return GetRuleContext<EvaluationContext>(i);
		}
		public LogicalConjunctionContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterLogicalConjunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitLogicalConjunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalConjunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanContext : EvaluationContext {
		public ParameterReferenceContext parameterReference() {
			return GetRuleContext<ParameterReferenceContext>(0);
		}
		public EvaluationLiteralContext evaluationLiteral() {
			return GetRuleContext<EvaluationLiteralContext>(0);
		}
		public LessThanContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterLessThan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitLessThan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanOrEqualContext : EvaluationContext {
		public ParameterReferenceContext parameterReference() {
			return GetRuleContext<ParameterReferenceContext>(0);
		}
		public EvaluationLiteralContext evaluationLiteral() {
			return GetRuleContext<EvaluationLiteralContext>(0);
		}
		public LessThanOrEqualContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterLessThanOrEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitLessThanOrEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EvaluationGroupingContext : EvaluationContext {
		public EvaluationContext evaluation() {
			return GetRuleContext<EvaluationContext>(0);
		}
		public EvaluationGroupingContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterEvaluationGrouping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitEvaluationGrouping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluationGrouping(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalDisjunctionContext : EvaluationContext {
		public EvaluationContext left;
		public EvaluationContext right;
		public ITerminalNode OR() { return GetToken(CalculateEvaluateParser.OR, 0); }
		public EvaluationContext[] evaluation() {
			return GetRuleContexts<EvaluationContext>();
		}
		public EvaluationContext evaluation(int i) {
			return GetRuleContext<EvaluationContext>(i);
		}
		public LogicalDisjunctionContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterLogicalDisjunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitLogicalDisjunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualContext : EvaluationContext {
		public ParameterReferenceContext parameterReference() {
			return GetRuleContext<ParameterReferenceContext>(0);
		}
		public EvaluationLiteralContext evaluationLiteral() {
			return GetRuleContext<EvaluationLiteralContext>(0);
		}
		public NotEqualContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterNotEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitNotEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanOrEqualContext : EvaluationContext {
		public ParameterReferenceContext parameterReference() {
			return GetRuleContext<ParameterReferenceContext>(0);
		}
		public EvaluationLiteralContext evaluationLiteral() {
			return GetRuleContext<EvaluationLiteralContext>(0);
		}
		public GreaterThanOrEqualContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterGreaterThanOrEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitGreaterThanOrEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanContext : EvaluationContext {
		public ParameterReferenceContext parameterReference() {
			return GetRuleContext<ParameterReferenceContext>(0);
		}
		public EvaluationLiteralContext evaluationLiteral() {
			return GetRuleContext<EvaluationLiteralContext>(0);
		}
		public GreaterThanContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterGreaterThan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitGreaterThan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluationContext evaluation() {
		return evaluation(0);
	}

	private EvaluationContext evaluation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EvaluationContext _localctx = new EvaluationContext(Context, _parentState);
		EvaluationContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_evaluation, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				_localctx = new EqualContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 59; parameterReference();
				State = 60; Match(T__7);
				State = 61; evaluationLiteral();
				}
				break;
			case 2:
				{
				_localctx = new NotEqualContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 63; parameterReference();
				State = 64; Match(T__8);
				State = 65; evaluationLiteral();
				}
				break;
			case 3:
				{
				_localctx = new LessThanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 67; parameterReference();
				State = 68; Match(T__9);
				State = 69; evaluationLiteral();
				}
				break;
			case 4:
				{
				_localctx = new LessThanOrEqualContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 71; parameterReference();
				State = 72; Match(T__10);
				State = 73; evaluationLiteral();
				}
				break;
			case 5:
				{
				_localctx = new GreaterThanOrEqualContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 75; parameterReference();
				State = 76; Match(T__11);
				State = 77; evaluationLiteral();
				}
				break;
			case 6:
				{
				_localctx = new GreaterThanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 79; parameterReference();
				State = 80; Match(T__12);
				State = 81; evaluationLiteral();
				}
				break;
			case 7:
				{
				_localctx = new EvaluationGroupingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 83; Match(T__0);
				State = 84; evaluation(0);
				State = 85; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 97;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 95;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new LogicalConjunctionContext(new EvaluationContext(_parentctx, _parentState));
						((LogicalConjunctionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_evaluation);
						State = 89;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 90; Match(AND);
						State = 91; ((LogicalConjunctionContext)_localctx).right = evaluation(10);
						}
						break;
					case 2:
						{
						_localctx = new LogicalDisjunctionContext(new EvaluationContext(_parentctx, _parentState));
						((LogicalDisjunctionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_evaluation);
						State = 92;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 93; Match(OR);
						State = 94; ((LogicalDisjunctionContext)_localctx).right = evaluation(9);
						}
						break;
					}
					} 
				}
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EvaluationLiteralContext : ParserRuleContext {
		public IToken content;
		public EvaluationLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluationLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterEvaluationLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitEvaluationLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluationLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluationLiteralContext evaluationLiteral() {
		EvaluationLiteralContext _localctx = new EvaluationLiteralContext(Context, State);
		EnterRule(_localctx, 8, RULE_evaluationLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(T__13);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__14) | (1L << T__15) | (1L << NUMBER) | (1L << AND) | (1L << OR) | (1L << IDENTIFIER) | (1L << WHITESPACE))) != 0)) {
				{
				{
				State = 101;
				_localctx.content = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__13) ) {
					_localctx.content = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterReferenceContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CalculateEvaluateParser.IDENTIFIER, 0); }
		public ParameterReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.EnterParameterReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateListener typedListener = listener as ICalculateEvaluateListener;
			if (typedListener != null) typedListener.ExitParameterReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterReferenceContext parameterReference() {
		ParameterReferenceContext _localctx = new ParameterReferenceContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameterReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(T__14);
			State = 110; Match(IDENTIFIER);
			State = 111; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return calculation_sempred((CalculationContext)_localctx, predIndex);
		case 3: return evaluation_sempred((EvaluationContext)_localctx, predIndex);
		}
		return true;
	}
	private bool calculation_sempred(CalculationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		}
		return true;
	}
	private bool evaluation_sempred(EvaluationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x17', 't', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\x11', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\"', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\x30', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x33', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', '\x38', '\n', '\x4', '\f', '\x4', '\xE', '\x4', ';', '\v', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', 'Z', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x62', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', '\x65', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', 'i', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'l', '\v', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x2', '\x4', '\x4', '\b', '\b', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\x2', '\x3', '\x3', '\x2', '\x10', '\x10', '\x2', '\x81', 
		'\x2', '\x10', '\x3', '\x2', '\x2', '\x2', '\x4', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x34', '\x3', '\x2', '\x2', '\x2', '\b', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x66', '\x3', '\x2', '\x2', '\x2', '\f', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x11', '\x5', '\x4', '\x3', '\x2', '\xF', 
		'\x11', '\x5', '\b', '\x5', '\x2', '\x10', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\xF', '\x3', '\x2', '\x2', '\x2', '\x11', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x13', '\b', '\x3', '\x1', '\x2', '\x13', 
		'\x14', '\a', '\x16', '\x2', '\x2', '\x14', '\x15', '\a', '\x3', '\x2', 
		'\x2', '\x15', '\x16', '\x5', '\x6', '\x4', '\x2', '\x16', '\x17', '\a', 
		'\x4', '\x2', '\x2', '\x17', '\"', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x19', '\a', '\x5', '\x2', '\x2', '\x19', '\"', '\x5', '\x4', '\x3', 
		'\v', '\x1A', '\"', '\a', '\x13', '\x2', '\x2', '\x1B', '\"', '\a', '\x16', 
		'\x2', '\x2', '\x1C', '\"', '\x5', '\f', '\a', '\x2', '\x1D', '\x1E', 
		'\a', '\x3', '\x2', '\x2', '\x1E', '\x1F', '\x5', '\x4', '\x3', '\x2', 
		'\x1F', ' ', '\a', '\x4', '\x2', '\x2', ' ', '\"', '\x3', '\x2', '\x2', 
		'\x2', '!', '\x12', '\x3', '\x2', '\x2', '\x2', '!', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '!', '\x1A', '\x3', '\x2', '\x2', '\x2', '!', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '!', '\x1C', '\x3', '\x2', '\x2', '\x2', '!', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'#', '$', '\f', '\n', '\x2', '\x2', '$', '%', '\a', '\x6', '\x2', '\x2', 
		'%', '\x30', '\x5', '\x4', '\x3', '\v', '&', '\'', '\f', '\t', '\x2', 
		'\x2', '\'', '(', '\a', '\a', '\x2', '\x2', '(', '\x30', '\x5', '\x4', 
		'\x3', '\n', ')', '*', '\f', '\b', '\x2', '\x2', '*', '+', '\a', '\b', 
		'\x2', '\x2', '+', '\x30', '\x5', '\x4', '\x3', '\t', ',', '-', '\f', 
		'\a', '\x2', '\x2', '-', '.', '\a', '\x5', '\x2', '\x2', '.', '\x30', 
		'\x5', '\x4', '\x3', '\b', '/', '#', '\x3', '\x2', '\x2', '\x2', '/', 
		'&', '\x3', '\x2', '\x2', '\x2', '/', ')', '\x3', '\x2', '\x2', '\x2', 
		'/', ',', '\x3', '\x2', '\x2', '\x2', '\x30', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x5', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x34', '\x39', '\x5', '\x4', '\x3', 
		'\x2', '\x35', '\x36', '\a', '\t', '\x2', '\x2', '\x36', '\x38', '\x5', 
		'\x4', '\x3', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', 
		';', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '\a', '\x3', '\x2', 
		'\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', '<', '=', '\b', 
		'\x5', '\x1', '\x2', '=', '>', '\x5', '\f', '\a', '\x2', '>', '?', '\a', 
		'\n', '\x2', '\x2', '?', '@', '\x5', '\n', '\x6', '\x2', '@', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\x5', '\f', '\a', '\x2', '\x42', 
		'\x43', '\a', '\v', '\x2', '\x2', '\x43', '\x44', '\x5', '\n', '\x6', 
		'\x2', '\x44', 'Z', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x5', 
		'\f', '\a', '\x2', '\x46', 'G', '\a', '\f', '\x2', '\x2', 'G', 'H', '\x5', 
		'\n', '\x6', '\x2', 'H', 'Z', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x5', 
		'\f', '\a', '\x2', 'J', 'K', '\a', '\r', '\x2', '\x2', 'K', 'L', '\x5', 
		'\n', '\x6', '\x2', 'L', 'Z', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x5', 
		'\f', '\a', '\x2', 'N', 'O', '\a', '\xE', '\x2', '\x2', 'O', 'P', '\x5', 
		'\n', '\x6', '\x2', 'P', 'Z', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x5', 
		'\f', '\a', '\x2', 'R', 'S', '\a', '\xF', '\x2', '\x2', 'S', 'T', '\x5', 
		'\n', '\x6', '\x2', 'T', 'Z', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', 
		'\x3', '\x2', '\x2', 'V', 'W', '\x5', '\b', '\x5', '\x2', 'W', 'X', '\a', 
		'\x4', '\x2', '\x2', 'X', 'Z', '\x3', '\x2', '\x2', '\x2', 'Y', '<', '\x3', 
		'\x2', '\x2', '\x2', 'Y', '\x41', '\x3', '\x2', '\x2', '\x2', 'Y', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'Y', 'I', '\x3', '\x2', '\x2', '\x2', 'Y', 
		'M', '\x3', '\x2', '\x2', '\x2', 'Y', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'U', '\x3', '\x2', '\x2', '\x2', 'Z', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\f', '\v', '\x2', '\x2', '\\', ']', '\a', '\x14', '\x2', 
		'\x2', ']', '\x62', '\x5', '\b', '\x5', '\f', '^', '_', '\f', '\n', '\x2', 
		'\x2', '_', '`', '\a', '\x15', '\x2', '\x2', '`', '\x62', '\x5', '\b', 
		'\x5', '\v', '\x61', '[', '\x3', '\x2', '\x2', '\x2', '\x61', '^', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x65', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\t', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'j', '\a', '\x10', '\x2', '\x2', 'g', 'i', 
		'\n', '\x2', '\x2', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 
		'l', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '\x10', '\x2', '\x2', 
		'n', '\v', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\a', '\x11', '\x2', 
		'\x2', 'p', 'q', '\a', '\x16', '\x2', '\x2', 'q', 'r', '\a', '\x12', '\x2', 
		'\x2', 'r', '\r', '\x3', '\x2', '\x2', '\x2', '\v', '\x10', '!', '/', 
		'\x31', '\x39', 'Y', '\x61', '\x63', 'j',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AppliedResearchAssociates.CalculateEvaluate

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CalculateEvaluateParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AppliedResearchAssociates.CalculateEvaluate {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculateEvaluateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACE=1, AND=2, OR=3, LEFT_PAREN=4, RIGHT_PAREN=5, TIMES=6, DIVIDED_BY=7, 
		PLUS=8, MINUS=9, EQUAL=10, NOT_EQUAL=11, LESS_THAN=12, LESS_THAN_OR_EQUAL=13, 
		GREATER_THAN_OR_EQUAL=14, GREATER_THAN=15, COMMA=16, LEFT_BRACKET=17, 
		RIGHT_BRACKET=18, TYPE_ANNOTATION=19, TEXT_TYPE_ANNOTATION=20, TIMESTAMP_TYPE_ANNOTATION=21, 
		IDENTIFIER=22, NUMBER=23, EVALUATION_LITERAL=24;
	public const int
		RULE_root = 0, RULE_calculation = 1, RULE_evaluation = 2, RULE_arguments = 3, 
		RULE_calculationParameterReference = 4, RULE_evaluationParameterReference = 5;
	public static readonly string[] ruleNames = {
		"root", "calculation", "evaluation", "arguments", "calculationParameterReference", 
		"evaluationParameterReference"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'('", "')'", "'*'", "'/'", "'+'", "'-'", "'='", 
		"'<>'", "'<'", "'<='", "'>='", "'>'", "','", "'['", "']'", null, "'@'", 
		"'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "AND", "OR", "LEFT_PAREN", "RIGHT_PAREN", "TIMES", 
		"DIVIDED_BY", "PLUS", "MINUS", "EQUAL", "NOT_EQUAL", "LESS_THAN", "LESS_THAN_OR_EQUAL", 
		"GREATER_THAN_OR_EQUAL", "GREATER_THAN", "COMMA", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"TYPE_ANNOTATION", "TEXT_TYPE_ANNOTATION", "TIMESTAMP_TYPE_ANNOTATION", 
		"IDENTIFIER", "NUMBER", "EVALUATION_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CalculateEvaluateParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculateEvaluateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculateEvaluateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculateEvaluateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
	 
		public RootContext() { }
		public virtual void CopyFrom(RootContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CalculationRootContext : RootContext {
		public CalculationContext calculation() {
			return GetRuleContext<CalculationContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CalculateEvaluateParser.Eof, 0); }
		public CalculationRootContext(RootContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterCalculationRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitCalculationRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalculationRoot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EvaluationRootContext : RootContext {
		public EvaluationContext evaluation() {
			return GetRuleContext<EvaluationContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CalculateEvaluateParser.Eof, 0); }
		public EvaluationRootContext(RootContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterEvaluationRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitEvaluationRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluationRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			State = 18;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new CalculationRootContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 12; calculation(0);
				State = 13; Match(Eof);
				}
				break;
			case 2:
				_localctx = new EvaluationRootContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 15; evaluation(0);
				State = 16; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalculationContext : ParserRuleContext {
		public CalculationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calculation; } }
	 
		public CalculationContext() { }
		public virtual void CopyFrom(CalculationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InvocationContext : CalculationContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CalculateEvaluateParser.IDENTIFIER, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(CalculateEvaluateParser.LEFT_PAREN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(CalculateEvaluateParser.RIGHT_PAREN, 0); }
		public InvocationContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegationContext : CalculationContext {
		public ITerminalNode MINUS() { return GetToken(CalculateEvaluateParser.MINUS, 0); }
		public CalculationContext calculation() {
			return GetRuleContext<CalculationContext>(0);
		}
		public NegationContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantReferenceContext : CalculationContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CalculateEvaluateParser.IDENTIFIER, 0); }
		public ConstantReferenceContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterConstantReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitConstantReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantReference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationOrDivisionContext : CalculationContext {
		public CalculationContext left;
		public IToken operation;
		public CalculationContext right;
		public CalculationContext[] calculation() {
			return GetRuleContexts<CalculationContext>();
		}
		public CalculationContext calculation(int i) {
			return GetRuleContext<CalculationContext>(i);
		}
		public ITerminalNode TIMES() { return GetToken(CalculateEvaluateParser.TIMES, 0); }
		public ITerminalNode DIVIDED_BY() { return GetToken(CalculateEvaluateParser.DIVIDED_BY, 0); }
		public MultiplicationOrDivisionContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationOrDivision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationOrDivision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationOrDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionOrSubtractionContext : CalculationContext {
		public CalculationContext left;
		public IToken operation;
		public CalculationContext right;
		public CalculationContext[] calculation() {
			return GetRuleContexts<CalculationContext>();
		}
		public CalculationContext calculation(int i) {
			return GetRuleContext<CalculationContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(CalculateEvaluateParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CalculateEvaluateParser.MINUS, 0); }
		public AdditionOrSubtractionContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterAdditionOrSubtraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitAdditionOrSubtraction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionOrSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CalculationGroupingContext : CalculationContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(CalculateEvaluateParser.LEFT_PAREN, 0); }
		public CalculationContext calculation() {
			return GetRuleContext<CalculationContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(CalculateEvaluateParser.RIGHT_PAREN, 0); }
		public CalculationGroupingContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterCalculationGrouping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitCalculationGrouping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalculationGrouping(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberParameterReferenceContext : CalculationContext {
		public CalculationParameterReferenceContext calculationParameterReference() {
			return GetRuleContext<CalculationParameterReferenceContext>(0);
		}
		public NumberParameterReferenceContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterNumberParameterReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitNumberParameterReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberParameterReference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberLiteralContext : CalculationContext {
		public ITerminalNode NUMBER() { return GetToken(CalculateEvaluateParser.NUMBER, 0); }
		public NumberLiteralContext(CalculationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalculationContext calculation() {
		return calculation(0);
	}

	private CalculationContext calculation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CalculationContext _localctx = new CalculationContext(Context, _parentState);
		CalculationContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_calculation, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				_localctx = new InvocationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 21; Match(IDENTIFIER);
				State = 22; Match(LEFT_PAREN);
				State = 23; arguments();
				State = 24; Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				_localctx = new NegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26; Match(MINUS);
				State = 27; calculation(7);
				}
				break;
			case 3:
				{
				_localctx = new NumberLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 28; Match(NUMBER);
				}
				break;
			case 4:
				{
				_localctx = new ConstantReferenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 29; Match(IDENTIFIER);
				}
				break;
			case 5:
				{
				_localctx = new NumberParameterReferenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 30; calculationParameterReference();
				}
				break;
			case 6:
				{
				_localctx = new CalculationGroupingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 31; Match(LEFT_PAREN);
				State = 32; calculation(0);
				State = 33; Match(RIGHT_PAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 45;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 43;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationOrDivisionContext(new CalculationContext(_parentctx, _parentState));
						((MultiplicationOrDivisionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_calculation);
						State = 37;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 38;
						((MultiplicationOrDivisionContext)_localctx).operation = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TIMES || _la==DIVIDED_BY) ) {
							((MultiplicationOrDivisionContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 39; ((MultiplicationOrDivisionContext)_localctx).right = calculation(7);
						}
						break;
					case 2:
						{
						_localctx = new AdditionOrSubtractionContext(new CalculationContext(_parentctx, _parentState));
						((AdditionOrSubtractionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_calculation);
						State = 40;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 41;
						((AdditionOrSubtractionContext)_localctx).operation = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AdditionOrSubtractionContext)_localctx).operation = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 42; ((AdditionOrSubtractionContext)_localctx).right = calculation(6);
						}
						break;
					}
					} 
				}
				State = 47;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EvaluationContext : ParserRuleContext {
		public EvaluationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluation; } }
	 
		public EvaluationContext() { }
		public virtual void CopyFrom(EvaluationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EqualContext : EvaluationContext {
		public EvaluationParameterReferenceContext evaluationParameterReference() {
			return GetRuleContext<EvaluationParameterReferenceContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(CalculateEvaluateParser.EQUAL, 0); }
		public ITerminalNode EVALUATION_LITERAL() { return GetToken(CalculateEvaluateParser.EVALUATION_LITERAL, 0); }
		public EqualContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalConjunctionContext : EvaluationContext {
		public EvaluationContext left;
		public EvaluationContext right;
		public ITerminalNode AND() { return GetToken(CalculateEvaluateParser.AND, 0); }
		public EvaluationContext[] evaluation() {
			return GetRuleContexts<EvaluationContext>();
		}
		public EvaluationContext evaluation(int i) {
			return GetRuleContext<EvaluationContext>(i);
		}
		public LogicalConjunctionContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterLogicalConjunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitLogicalConjunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalConjunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanContext : EvaluationContext {
		public EvaluationParameterReferenceContext evaluationParameterReference() {
			return GetRuleContext<EvaluationParameterReferenceContext>(0);
		}
		public ITerminalNode LESS_THAN() { return GetToken(CalculateEvaluateParser.LESS_THAN, 0); }
		public ITerminalNode EVALUATION_LITERAL() { return GetToken(CalculateEvaluateParser.EVALUATION_LITERAL, 0); }
		public LessThanContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterLessThan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitLessThan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanOrEqualContext : EvaluationContext {
		public EvaluationParameterReferenceContext evaluationParameterReference() {
			return GetRuleContext<EvaluationParameterReferenceContext>(0);
		}
		public ITerminalNode LESS_THAN_OR_EQUAL() { return GetToken(CalculateEvaluateParser.LESS_THAN_OR_EQUAL, 0); }
		public ITerminalNode EVALUATION_LITERAL() { return GetToken(CalculateEvaluateParser.EVALUATION_LITERAL, 0); }
		public LessThanOrEqualContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterLessThanOrEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitLessThanOrEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EvaluationGroupingContext : EvaluationContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(CalculateEvaluateParser.LEFT_PAREN, 0); }
		public EvaluationContext evaluation() {
			return GetRuleContext<EvaluationContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(CalculateEvaluateParser.RIGHT_PAREN, 0); }
		public EvaluationGroupingContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterEvaluationGrouping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitEvaluationGrouping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluationGrouping(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalDisjunctionContext : EvaluationContext {
		public EvaluationContext left;
		public EvaluationContext right;
		public ITerminalNode OR() { return GetToken(CalculateEvaluateParser.OR, 0); }
		public EvaluationContext[] evaluation() {
			return GetRuleContexts<EvaluationContext>();
		}
		public EvaluationContext evaluation(int i) {
			return GetRuleContext<EvaluationContext>(i);
		}
		public LogicalDisjunctionContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterLogicalDisjunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitLogicalDisjunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualContext : EvaluationContext {
		public EvaluationParameterReferenceContext evaluationParameterReference() {
			return GetRuleContext<EvaluationParameterReferenceContext>(0);
		}
		public ITerminalNode NOT_EQUAL() { return GetToken(CalculateEvaluateParser.NOT_EQUAL, 0); }
		public ITerminalNode EVALUATION_LITERAL() { return GetToken(CalculateEvaluateParser.EVALUATION_LITERAL, 0); }
		public NotEqualContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterNotEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitNotEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanOrEqualContext : EvaluationContext {
		public EvaluationParameterReferenceContext evaluationParameterReference() {
			return GetRuleContext<EvaluationParameterReferenceContext>(0);
		}
		public ITerminalNode GREATER_THAN_OR_EQUAL() { return GetToken(CalculateEvaluateParser.GREATER_THAN_OR_EQUAL, 0); }
		public ITerminalNode EVALUATION_LITERAL() { return GetToken(CalculateEvaluateParser.EVALUATION_LITERAL, 0); }
		public GreaterThanOrEqualContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterGreaterThanOrEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitGreaterThanOrEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanContext : EvaluationContext {
		public EvaluationParameterReferenceContext evaluationParameterReference() {
			return GetRuleContext<EvaluationParameterReferenceContext>(0);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(CalculateEvaluateParser.GREATER_THAN, 0); }
		public ITerminalNode EVALUATION_LITERAL() { return GetToken(CalculateEvaluateParser.EVALUATION_LITERAL, 0); }
		public GreaterThanContext(EvaluationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterGreaterThan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitGreaterThan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluationContext evaluation() {
		return evaluation(0);
	}

	private EvaluationContext evaluation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EvaluationContext _localctx = new EvaluationContext(Context, _parentState);
		EvaluationContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_evaluation, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				_localctx = new EqualContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 49; evaluationParameterReference();
				State = 50; Match(EQUAL);
				State = 51; Match(EVALUATION_LITERAL);
				}
				break;
			case 2:
				{
				_localctx = new NotEqualContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 53; evaluationParameterReference();
				State = 54; Match(NOT_EQUAL);
				State = 55; Match(EVALUATION_LITERAL);
				}
				break;
			case 3:
				{
				_localctx = new LessThanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 57; evaluationParameterReference();
				State = 58; Match(LESS_THAN);
				State = 59; Match(EVALUATION_LITERAL);
				}
				break;
			case 4:
				{
				_localctx = new LessThanOrEqualContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 61; evaluationParameterReference();
				State = 62; Match(LESS_THAN_OR_EQUAL);
				State = 63; Match(EVALUATION_LITERAL);
				}
				break;
			case 5:
				{
				_localctx = new GreaterThanOrEqualContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 65; evaluationParameterReference();
				State = 66; Match(GREATER_THAN_OR_EQUAL);
				State = 67; Match(EVALUATION_LITERAL);
				}
				break;
			case 6:
				{
				_localctx = new GreaterThanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 69; evaluationParameterReference();
				State = 70; Match(GREATER_THAN);
				State = 71; Match(EVALUATION_LITERAL);
				}
				break;
			case 7:
				{
				_localctx = new EvaluationGroupingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 73; Match(LEFT_PAREN);
				State = 74; evaluation(0);
				State = 75; Match(RIGHT_PAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 87;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 85;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new LogicalConjunctionContext(new EvaluationContext(_parentctx, _parentState));
						((LogicalConjunctionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_evaluation);
						State = 79;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 80; Match(AND);
						State = 81; ((LogicalConjunctionContext)_localctx).right = evaluation(10);
						}
						break;
					case 2:
						{
						_localctx = new LogicalDisjunctionContext(new EvaluationContext(_parentctx, _parentState));
						((LogicalDisjunctionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_evaluation);
						State = 82;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 83; Match(OR);
						State = 84; ((LogicalDisjunctionContext)_localctx).right = evaluation(9);
						}
						break;
					}
					} 
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public CalculationContext[] calculation() {
			return GetRuleContexts<CalculationContext>();
		}
		public CalculationContext calculation(int i) {
			return GetRuleContext<CalculationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CalculateEvaluateParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CalculateEvaluateParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 6, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; calculation(0);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 91; Match(COMMA);
				State = 92; calculation(0);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalculationParameterReferenceContext : ParserRuleContext {
		public ITerminalNode LEFT_BRACKET() { return GetToken(CalculateEvaluateParser.LEFT_BRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CalculateEvaluateParser.IDENTIFIER, 0); }
		public ITerminalNode RIGHT_BRACKET() { return GetToken(CalculateEvaluateParser.RIGHT_BRACKET, 0); }
		public CalculationParameterReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calculationParameterReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterCalculationParameterReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitCalculationParameterReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalculationParameterReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalculationParameterReferenceContext calculationParameterReference() {
		CalculationParameterReferenceContext _localctx = new CalculationParameterReferenceContext(Context, State);
		EnterRule(_localctx, 8, RULE_calculationParameterReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(LEFT_BRACKET);
			State = 99; Match(IDENTIFIER);
			State = 100; Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluationParameterReferenceContext : ParserRuleContext {
		public ITerminalNode LEFT_BRACKET() { return GetToken(CalculateEvaluateParser.LEFT_BRACKET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CalculateEvaluateParser.IDENTIFIER, 0); }
		public ITerminalNode RIGHT_BRACKET() { return GetToken(CalculateEvaluateParser.RIGHT_BRACKET, 0); }
		public ITerminalNode TYPE_ANNOTATION() { return GetToken(CalculateEvaluateParser.TYPE_ANNOTATION, 0); }
		public EvaluationParameterReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluationParameterReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.EnterEvaluationParameterReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculateEvaluateParserListener typedListener = listener as ICalculateEvaluateParserListener;
			if (typedListener != null) typedListener.ExitEvaluationParameterReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculateEvaluateParserVisitor<TResult> typedVisitor = visitor as ICalculateEvaluateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluationParameterReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluationParameterReferenceContext evaluationParameterReference() {
		EvaluationParameterReferenceContext _localctx = new EvaluationParameterReferenceContext(Context, State);
		EnterRule(_localctx, 10, RULE_evaluationParameterReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(LEFT_BRACKET);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE_ANNOTATION) {
				{
				State = 103; Match(TYPE_ANNOTATION);
				}
			}

			State = 106; Match(IDENTIFIER);
			State = 107; Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return calculation_sempred((CalculationContext)_localctx, predIndex);
		case 2: return evaluation_sempred((EvaluationContext)_localctx, predIndex);
		}
		return true;
	}
	private bool calculation_sempred(CalculationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		}
		return true;
	}
	private bool evaluation_sempred(EvaluationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1A', 'p', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\x15', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '&', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'.', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x31', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'P', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', 'X', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '[', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', 
		'\x5', '`', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x63', '\v', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', 'k', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x2', '\x4', '\x4', '\x6', '\b', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\x2', '\x4', '\x3', '\x2', '\b', '\t', '\x3', '\x2', '\n', 
		'\v', '\x2', '{', '\x2', '\x14', '\x3', '\x2', '\x2', '\x2', '\x4', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'O', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\n', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'h', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\x5', '\x4', '\x3', 
		'\x2', '\xF', '\x10', '\a', '\x2', '\x2', '\x3', '\x10', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x12', '\x5', '\x6', '\x4', '\x2', '\x12', 
		'\x13', '\a', '\x2', '\x2', '\x3', '\x13', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xE', '\x3', '\x2', '\x2', '\x2', '\x14', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x17', '\b', '\x3', '\x1', '\x2', '\x17', '\x18', '\a', '\x18', '\x2', 
		'\x2', '\x18', '\x19', '\a', '\x6', '\x2', '\x2', '\x19', '\x1A', '\x5', 
		'\b', '\x5', '\x2', '\x1A', '\x1B', '\a', '\a', '\x2', '\x2', '\x1B', 
		'&', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '\v', '\x2', '\x2', 
		'\x1D', '&', '\x5', '\x4', '\x3', '\t', '\x1E', '&', '\a', '\x19', '\x2', 
		'\x2', '\x1F', '&', '\a', '\x18', '\x2', '\x2', ' ', '&', '\x5', '\n', 
		'\x6', '\x2', '!', '\"', '\a', '\x6', '\x2', '\x2', '\"', '#', '\x5', 
		'\x4', '\x3', '\x2', '#', '$', '\a', '\a', '\x2', '\x2', '$', '&', '\x3', 
		'\x2', '\x2', '\x2', '%', '\x16', '\x3', '\x2', '\x2', '\x2', '%', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '%', '\x1E', '\x3', '\x2', '\x2', '\x2', '%', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '%', ' ', '\x3', '\x2', '\x2', '\x2', 
		'%', '!', '\x3', '\x2', '\x2', '\x2', '&', '/', '\x3', '\x2', '\x2', '\x2', 
		'\'', '(', '\f', '\b', '\x2', '\x2', '(', ')', '\t', '\x2', '\x2', '\x2', 
		')', '.', '\x5', '\x4', '\x3', '\t', '*', '+', '\f', '\a', '\x2', '\x2', 
		'+', ',', '\t', '\x3', '\x2', '\x2', ',', '.', '\x5', '\x4', '\x3', '\b', 
		'-', '\'', '\x3', '\x2', '\x2', '\x2', '-', '*', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x33', '\b', '\x4', '\x1', '\x2', '\x33', '\x34', '\x5', '\f', '\a', 
		'\x2', '\x34', '\x35', '\a', '\f', '\x2', '\x2', '\x35', '\x36', '\a', 
		'\x1A', '\x2', '\x2', '\x36', 'P', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\x5', '\f', '\a', '\x2', '\x38', '\x39', '\a', '\r', '\x2', '\x2', 
		'\x39', ':', '\a', '\x1A', '\x2', '\x2', ':', 'P', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\x5', '\f', '\a', '\x2', '<', '=', '\a', '\xE', '\x2', 
		'\x2', '=', '>', '\a', '\x1A', '\x2', '\x2', '>', 'P', '\x3', '\x2', '\x2', 
		'\x2', '?', '@', '\x5', '\f', '\a', '\x2', '@', '\x41', '\a', '\xF', '\x2', 
		'\x2', '\x41', '\x42', '\a', '\x1A', '\x2', '\x2', '\x42', 'P', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\x5', '\f', '\a', '\x2', '\x44', 
		'\x45', '\a', '\x10', '\x2', '\x2', '\x45', '\x46', '\a', '\x1A', '\x2', 
		'\x2', '\x46', 'P', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x5', '\f', 
		'\a', '\x2', 'H', 'I', '\a', '\x11', '\x2', '\x2', 'I', 'J', '\a', '\x1A', 
		'\x2', '\x2', 'J', 'P', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\x6', 
		'\x2', '\x2', 'L', 'M', '\x5', '\x6', '\x4', '\x2', 'M', 'N', '\a', '\a', 
		'\x2', '\x2', 'N', 'P', '\x3', '\x2', '\x2', '\x2', 'O', '\x32', '\x3', 
		'\x2', '\x2', '\x2', 'O', '\x37', '\x3', '\x2', '\x2', '\x2', 'O', ';', 
		'\x3', '\x2', '\x2', '\x2', 'O', '?', '\x3', '\x2', '\x2', '\x2', 'O', 
		'\x43', '\x3', '\x2', '\x2', '\x2', 'O', 'G', '\x3', '\x2', '\x2', '\x2', 
		'O', 'K', '\x3', '\x2', '\x2', '\x2', 'P', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\f', '\v', '\x2', '\x2', 'R', 'S', '\a', '\x4', '\x2', '\x2', 
		'S', 'X', '\x5', '\x6', '\x4', '\f', 'T', 'U', '\f', '\n', '\x2', '\x2', 
		'U', 'V', '\a', '\x5', '\x2', '\x2', 'V', 'X', '\x5', '\x6', '\x4', '\v', 
		'W', 'Q', '\x3', '\x2', '\x2', '\x2', 'W', 'T', '\x3', '\x2', '\x2', '\x2', 
		'X', '[', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\a', '\x3', '\x2', '\x2', 
		'\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '\\', '\x61', '\x5', '\x4', 
		'\x3', '\x2', ']', '^', '\a', '\x12', '\x2', '\x2', '^', '`', '\x5', '\x4', 
		'\x3', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'\x13', '\x2', '\x2', '\x65', '\x66', '\a', '\x18', '\x2', '\x2', '\x66', 
		'g', '\a', '\x14', '\x2', '\x2', 'g', '\v', '\x3', '\x2', '\x2', '\x2', 
		'h', 'j', '\a', '\x13', '\x2', '\x2', 'i', 'k', '\a', '\x15', '\x2', '\x2', 
		'j', 'i', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', '\x18', '\x2', '\x2', 
		'm', 'n', '\a', '\x14', '\x2', '\x2', 'n', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\v', '\x14', '%', '-', '/', 'O', 'W', 'Y', '\x61', 'j',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AppliedResearchAssociates.CalculateEvaluate

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CalculateEvaluateParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AppliedResearchAssociates.CalculateEvaluate {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="CalculateEvaluateParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface ICalculateEvaluateParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>calculationRoot</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCalculationRoot([NotNull] CalculateEvaluateParser.CalculationRootContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>evaluationRoot</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEvaluationRoot([NotNull] CalculateEvaluateParser.EvaluationRootContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>invocation</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInvocation([NotNull] CalculateEvaluateParser.InvocationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>negation</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNegation([NotNull] CalculateEvaluateParser.NegationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>multiplicationOrDivision</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicationOrDivision([NotNull] CalculateEvaluateParser.MultiplicationOrDivisionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>additionOrSubtraction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditionOrSubtraction([NotNull] CalculateEvaluateParser.AdditionOrSubtractionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>calculationGrouping</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCalculationGrouping([NotNull] CalculateEvaluateParser.CalculationGroupingContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>numberReference</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberReference([NotNull] CalculateEvaluateParser.NumberReferenceContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>numberParameterReference</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberParameterReference([NotNull] CalculateEvaluateParser.NumberParameterReferenceContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>numberLiteral</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberLiteral([NotNull] CalculateEvaluateParser.NumberLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CalculateEvaluateParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArguments([NotNull] CalculateEvaluateParser.ArgumentsContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>equal</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqual([NotNull] CalculateEvaluateParser.EqualContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>logicalConjunction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalConjunction([NotNull] CalculateEvaluateParser.LogicalConjunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lessThan</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLessThan([NotNull] CalculateEvaluateParser.LessThanContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lessThanOrEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLessThanOrEqual([NotNull] CalculateEvaluateParser.LessThanOrEqualContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>evaluationGrouping</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEvaluationGrouping([NotNull] CalculateEvaluateParser.EvaluationGroupingContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>logicalDisjunction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalDisjunction([NotNull] CalculateEvaluateParser.LogicalDisjunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>notEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotEqual([NotNull] CalculateEvaluateParser.NotEqualContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>greaterThanOrEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterThanOrEqual([NotNull] CalculateEvaluateParser.GreaterThanOrEqualContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>greaterThan</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterThan([NotNull] CalculateEvaluateParser.GreaterThanContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CalculateEvaluateParser.parameterReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameterReference([NotNull] CalculateEvaluateParser.ParameterReferenceContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CalculateEvaluateParser.comparisonOperand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComparisonOperand([NotNull] CalculateEvaluateParser.ComparisonOperandContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="CalculateEvaluateParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteral([NotNull] CalculateEvaluateParser.LiteralContext context);
}
} // namespace AppliedResearchAssociates.CalculateEvaluate

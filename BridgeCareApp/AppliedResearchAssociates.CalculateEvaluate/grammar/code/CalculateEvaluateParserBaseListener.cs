//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CalculateEvaluateParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AppliedResearchAssociates.CalculateEvaluate {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ICalculateEvaluateParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculateEvaluateParserBaseListener : ICalculateEvaluateParserListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>calculationRoot</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCalculationRoot([NotNull] CalculateEvaluateParser.CalculationRootContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>calculationRoot</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCalculationRoot([NotNull] CalculateEvaluateParser.CalculationRootContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>evaluationRoot</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEvaluationRoot([NotNull] CalculateEvaluateParser.EvaluationRootContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>evaluationRoot</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEvaluationRoot([NotNull] CalculateEvaluateParser.EvaluationRootContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>division</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivision([NotNull] CalculateEvaluateParser.DivisionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>division</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivision([NotNull] CalculateEvaluateParser.DivisionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>invocation</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInvocation([NotNull] CalculateEvaluateParser.InvocationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>invocation</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInvocation([NotNull] CalculateEvaluateParser.InvocationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>negation</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegation([NotNull] CalculateEvaluateParser.NegationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>negation</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegation([NotNull] CalculateEvaluateParser.NegationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>constantReference</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstantReference([NotNull] CalculateEvaluateParser.ConstantReferenceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>constantReference</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstantReference([NotNull] CalculateEvaluateParser.ConstantReferenceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>subtraction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubtraction([NotNull] CalculateEvaluateParser.SubtractionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>subtraction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubtraction([NotNull] CalculateEvaluateParser.SubtractionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplication</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplication([NotNull] CalculateEvaluateParser.MultiplicationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplication</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplication([NotNull] CalculateEvaluateParser.MultiplicationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>calculationGrouping</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCalculationGrouping([NotNull] CalculateEvaluateParser.CalculationGroupingContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>calculationGrouping</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCalculationGrouping([NotNull] CalculateEvaluateParser.CalculationGroupingContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>numberParameterReference</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberParameterReference([NotNull] CalculateEvaluateParser.NumberParameterReferenceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>numberParameterReference</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberParameterReference([NotNull] CalculateEvaluateParser.NumberParameterReferenceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>numberLiteral</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberLiteral([NotNull] CalculateEvaluateParser.NumberLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>numberLiteral</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberLiteral([NotNull] CalculateEvaluateParser.NumberLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>addition</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddition([NotNull] CalculateEvaluateParser.AdditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>addition</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.calculation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddition([NotNull] CalculateEvaluateParser.AdditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>equal</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEqual([NotNull] CalculateEvaluateParser.EqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>equal</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEqual([NotNull] CalculateEvaluateParser.EqualContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>logicalConjunction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalConjunction([NotNull] CalculateEvaluateParser.LogicalConjunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalConjunction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalConjunction([NotNull] CalculateEvaluateParser.LogicalConjunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThan</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessThan([NotNull] CalculateEvaluateParser.LessThanContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThan</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessThan([NotNull] CalculateEvaluateParser.LessThanContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanOrEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessThanOrEqual([NotNull] CalculateEvaluateParser.LessThanOrEqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanOrEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessThanOrEqual([NotNull] CalculateEvaluateParser.LessThanOrEqualContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>evaluationGrouping</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEvaluationGrouping([NotNull] CalculateEvaluateParser.EvaluationGroupingContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>evaluationGrouping</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEvaluationGrouping([NotNull] CalculateEvaluateParser.EvaluationGroupingContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>logicalDisjunction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalDisjunction([NotNull] CalculateEvaluateParser.LogicalDisjunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalDisjunction</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalDisjunction([NotNull] CalculateEvaluateParser.LogicalDisjunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>notEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotEqual([NotNull] CalculateEvaluateParser.NotEqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>notEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotEqual([NotNull] CalculateEvaluateParser.NotEqualContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanOrEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterThanOrEqual([NotNull] CalculateEvaluateParser.GreaterThanOrEqualContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanOrEqual</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterThanOrEqual([NotNull] CalculateEvaluateParser.GreaterThanOrEqualContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThan</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterThan([NotNull] CalculateEvaluateParser.GreaterThanContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThan</c>
	/// labeled alternative in <see cref="CalculateEvaluateParser.evaluation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterThan([NotNull] CalculateEvaluateParser.GreaterThanContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculateEvaluateParser.arguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArguments([NotNull] CalculateEvaluateParser.ArgumentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculateEvaluateParser.arguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArguments([NotNull] CalculateEvaluateParser.ArgumentsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculateEvaluateParser.parameterReference"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameterReference([NotNull] CalculateEvaluateParser.ParameterReferenceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculateEvaluateParser.parameterReference"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameterReference([NotNull] CalculateEvaluateParser.ParameterReferenceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculateEvaluateParser.evaluationLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEvaluationLiteral([NotNull] CalculateEvaluateParser.EvaluationLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculateEvaluateParser.evaluationLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEvaluationLiteral([NotNull] CalculateEvaluateParser.EvaluationLiteralContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace AppliedResearchAssociates.CalculateEvaluate

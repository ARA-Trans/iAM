//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CalculateEvaluateLexer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AppliedResearchAssociates.CalculateEvaluate {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculateEvaluateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACE=1, AND=2, OR=3, LEFT_PAREN=4, RIGHT_PAREN=5, TIMES=6, DIVIDED_BY=7, 
		PLUS=8, MINUS=9, EQUAL=10, NOT_EQUAL=11, LESS_THAN=12, LESS_THAN_OR_EQUAL=13, 
		GREATER_THAN_OR_EQUAL=14, GREATER_THAN=15, COMMA=16, LEFT_BRACKET=17, 
		RIGHT_BRACKET=18, IDENTIFIER=19, NUMBER=20, EMPTY_EVALUATION_LITERAL=21, 
		EVALUATION_LITERAL_OPENING_DELIMITER=22, EVALUATION_LITERAL_CONTENT=23, 
		EVALUATION_LITERAL_CLOSING_DELIMITER=24;
	public const int
		EVALUATION_LITERAL_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "EVALUATION_LITERAL_MODE"
	};

	public static readonly string[] ruleNames = {
		"WHITESPACE", "AND", "OR", "LEFT_PAREN", "RIGHT_PAREN", "TIMES", "DIVIDED_BY", 
		"PLUS", "MINUS", "EQUAL", "NOT_EQUAL", "LESS_THAN", "LESS_THAN_OR_EQUAL", 
		"GREATER_THAN_OR_EQUAL", "GREATER_THAN", "COMMA", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"IDENTIFIER", "NUMBER", "LETTER", "DIGIT", "MANTISSA_PART", "EXPONENT_PART", 
		"NATURAL_NUMBER", "DECIMAL_PART", "EMPTY_EVALUATION_LITERAL", "EVALUATION_LITERAL_OPENING_DELIMITER", 
		"EVALUATION_LITERAL_CONTENT", "EVALUATION_LITERAL_CLOSING_DELIMITER"
	};


	public CalculateEvaluateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalculateEvaluateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'('", "')'", "'*'", "'/'", "'+'", "'-'", "'='", 
		"'<>'", "'<'", "'<='", "'>='", "'>'", "','", "'['", "']'", null, null, 
		"'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "AND", "OR", "LEFT_PAREN", "RIGHT_PAREN", "TIMES", 
		"DIVIDED_BY", "PLUS", "MINUS", "EQUAL", "NOT_EQUAL", "LESS_THAN", "LESS_THAN_OR_EQUAL", 
		"GREATER_THAN_OR_EQUAL", "GREATER_THAN", "COMMA", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"IDENTIFIER", "NUMBER", "EMPTY_EVALUATION_LITERAL", "EVALUATION_LITERAL_OPENING_DELIMITER", 
		"EVALUATION_LITERAL_CONTENT", "EVALUATION_LITERAL_CLOSING_DELIMITER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CalculateEvaluateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculateEvaluateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x1A', '\xAC', '\b', '\x1', '\b', '\x1', '\x4', '\x2', 
		'\t', '\x2', '\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', 
		'\x5', '\t', '\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', 
		'\x4', '\b', '\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', 
		'\x4', '\v', '\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', 
		'\x4', '\xE', '\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', 
		'\x10', '\x4', '\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', 
		'\x13', '\t', '\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', 
		'\x15', '\x4', '\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', 
		'\x18', '\t', '\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', 
		'\x1A', '\x4', '\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', 
		'\x1D', '\t', '\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', 
		'\x1F', '\x3', '\x2', '\x6', '\x2', '\x42', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', '\x43', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\a', '\x14', 's', '\n', '\x14', '\f', '\x14', '\xE', '\x14', 'v', '\v', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 'z', '\n', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x82', '\n', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x85', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\x89', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\a', '\x1A', '\x90', '\n', '\x1A', '\f', '\x1A', 
		'\xE', '\x1A', '\x93', '\v', '\x1A', '\x5', '\x1A', '\x95', '\n', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x6', '\x1B', '\x99', '\n', '\x1B', '\r', 
		'\x1B', '\xE', '\x1B', '\x9A', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', 
		'\x6', '\x1E', '\xA5', '\n', '\x1E', '\r', '\x1E', '\xE', '\x1E', '\xA6', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x2', '\x2', 
		' ', '\x4', '\x3', '\x6', '\x4', '\b', '\x5', '\n', '\x6', '\f', '\a', 
		'\xE', '\b', '\x10', '\t', '\x12', '\n', '\x14', '\v', '\x16', '\f', '\x18', 
		'\r', '\x1A', '\xE', '\x1C', '\xF', '\x1E', '\x10', ' ', '\x11', '\"', 
		'\x12', '$', '\x13', '&', '\x14', '(', '\x15', '*', '\x16', ',', '\x2', 
		'.', '\x2', '\x30', '\x2', '\x32', '\x2', '\x34', '\x2', '\x36', '\x2', 
		'\x38', '\x17', ':', '\x18', '<', '\x19', '>', '\x1A', '\x4', '\x2', '\x3', 
		'\xE', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x4', '\x2', 
		'\x43', '\x43', '\x63', '\x63', '\x4', '\x2', 'P', 'P', 'p', 'p', '\x4', 
		'\x2', '\x46', '\x46', '\x66', '\x66', '\x4', '\x2', 'Q', 'Q', 'q', 'q', 
		'\x4', '\x2', 'T', 'T', 't', 't', '\x5', '\x2', '\x43', '\\', '\x61', 
		'\x61', '\x63', '|', '\x3', '\x2', '\x32', ';', '\x4', '\x2', 'G', 'G', 
		'g', 'g', '\x4', '\x2', '-', '-', '/', '/', '\x3', '\x2', '\x33', ';', 
		'\x3', '\x2', '~', '~', '\x2', '\xAF', '\x2', '\x4', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x6', '\x3', '\x2', '\x2', '\x2', '\x2', '\b', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\n', '\x3', '\x2', '\x2', '\x2', '\x2', '\f', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\xE', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x10', '\x3', '\x2', '\x2', '\x2', '\x2', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x14', '\x3', '\x2', '\x2', '\x2', '\x2', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x18', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x2', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\"', '\x3', '\x2', '\x2', '\x2', '\x2', '$', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '&', '\x3', '\x2', '\x2', '\x2', '\x2', '(', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '*', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x2', ':', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '<', '\x3', '\x2', '\x2', '\x2', '\x3', '>', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x41', '\x3', '\x2', '\x2', '\x2', '\x6', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'K', '\x3', '\x2', '\x2', '\x2', '\n', 'N', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'P', '\x3', '\x2', '\x2', '\x2', '\xE', 'R', 
		'\x3', '\x2', '\x2', '\x2', '\x10', 'T', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'V', '\x3', '\x2', '\x2', '\x2', '\x14', 'X', '\x3', '\x2', '\x2', '\x2', 
		'\x16', 'Z', '\x3', '\x2', '\x2', '\x2', '\x18', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '_', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x64', '\x3', '\x2', '\x2', '\x2', ' ', 
		'g', '\x3', '\x2', '\x2', '\x2', '\"', 'i', '\x3', '\x2', '\x2', '\x2', 
		'$', 'k', '\x3', '\x2', '\x2', '\x2', '&', 'm', '\x3', '\x2', '\x2', '\x2', 
		'(', 'o', '\x3', '\x2', '\x2', '\x2', '*', 'w', '\x3', '\x2', '\x2', '\x2', 
		',', '{', '\x3', '\x2', '\x2', '\x2', '.', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x84', '\x3', '\x2', '\x2', '\x2', '\x32', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x94', '\x3', '\x2', '\x2', '\x2', '\x36', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		':', '\x9F', '\x3', '\x2', '\x2', '\x2', '<', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '>', '\xA8', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\t', '\x2', 
		'\x2', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x46', '\b', '\x2', '\x2', '\x2', '\x46', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\t', '\x3', '\x2', '\x2', 'H', 
		'I', '\t', '\x4', '\x2', '\x2', 'I', 'J', '\t', '\x5', '\x2', '\x2', 'J', 
		'\a', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\t', '\x6', '\x2', '\x2', 
		'L', 'M', '\t', '\a', '\x2', '\x2', 'M', '\t', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\a', '*', '\x2', '\x2', 'O', '\v', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\a', '+', '\x2', '\x2', 'Q', '\r', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\a', ',', '\x2', '\x2', 'S', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\a', '\x31', '\x2', '\x2', 'U', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\a', '-', '\x2', '\x2', 'W', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\a', '/', '\x2', '\x2', 'Y', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\a', '?', '\x2', '\x2', '[', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\a', '>', '\x2', '\x2', ']', '^', '\a', '@', '\x2', 
		'\x2', '^', '\x19', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '>', '\x2', 
		'\x2', '`', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', 
		'>', '\x2', '\x2', '\x62', '\x63', '\a', '?', '\x2', '\x2', '\x63', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', '@', '\x2', '\x2', '\x65', 
		'\x66', '\a', '?', '\x2', '\x2', '\x66', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\a', '@', '\x2', '\x2', 'h', '!', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'j', '\a', '.', '\x2', '\x2', 'j', '#', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'l', '\a', ']', '\x2', '\x2', 'l', '%', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\a', '_', '\x2', '\x2', 'n', '\'', '\x3', '\x2', '\x2', 
		'\x2', 'o', 't', '\x5', ',', '\x16', '\x2', 'p', 's', '\x5', ',', '\x16', 
		'\x2', 'q', 's', '\x5', '.', '\x17', '\x2', 'r', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 's', 'v', '\x3', '\x2', '\x2', 
		'\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'u', ')', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'y', '\x5', '\x30', '\x18', '\x2', 'x', 'z', '\x5', '\x32', 
		'\x19', '\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', 
		'\x2', '\x2', '\x2', 'z', '+', '\x3', '\x2', '\x2', '\x2', '{', '|', '\t', 
		'\b', '\x2', '\x2', '|', '-', '\x3', '\x2', '\x2', '\x2', '}', '~', '\t', 
		'\t', '\x2', '\x2', '~', '/', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x81', 
		'\x5', '\x34', '\x1A', '\x2', '\x80', '\x82', '\x5', '\x36', '\x1B', '\x2', 
		'\x81', '\x80', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x85', '\x3', '\x2', '\x2', '\x2', '\x83', '\x85', 
		'\x5', '\x36', '\x1B', '\x2', '\x84', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x88', '\t', '\n', '\x2', '\x2', '\x87', '\x89', 
		'\t', '\v', '\x2', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8B', '\x5', '\x34', '\x1A', '\x2', '\x8B', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x95', '\a', '\x32', '\x2', '\x2', 
		'\x8D', '\x91', '\t', '\f', '\x2', '\x2', '\x8E', '\x90', '\x5', '.', 
		'\x17', '\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x94', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x35', '\x3', '\x2', '\x2', '\x2', '\x96', '\x98', '\a', '\x30', 
		'\x2', '\x2', '\x97', '\x99', '\x5', '.', '\x17', '\x2', '\x98', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x37', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', 
		'\a', '~', '\x2', '\x2', '\x9D', '\x9E', '\a', '~', '\x2', '\x2', '\x9E', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', '~', '\x2', 
		'\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\b', 
		'\x1D', '\x3', '\x2', '\xA2', ';', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA5', '\n', '\r', '\x2', '\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'=', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\a', '~', '\x2', '\x2', 
		'\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\b', '\x1F', 
		'\x4', '\x2', '\xAB', '?', '\x3', '\x2', '\x2', '\x2', '\xF', '\x2', '\x3', 
		'\x43', 'r', 't', 'y', '\x81', '\x84', '\x88', '\x91', '\x94', '\x9A', 
		'\xA6', '\x5', '\x2', '\x3', '\x2', '\x4', '\x3', '\x2', '\x4', '\x2', 
		'\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AppliedResearchAssociates.CalculateEvaluate

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CalculateEvaluateLexer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AppliedResearchAssociates.CalculateEvaluate {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculateEvaluateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EVALUATION_LITERAL=1, WHITESPACE=2, AND=3, OR=4, LEFT_PAREN=5, RIGHT_PAREN=6, 
		TIMES=7, DIVIDED_BY=8, PLUS=9, MINUS=10, EQUAL=11, NOT_EQUAL=12, LESS_THAN=13, 
		LESS_THAN_OR_EQUAL=14, GREATER_THAN_OR_EQUAL=15, GREATER_THAN=16, COMMA=17, 
		LEFT_BRACKET=18, RIGHT_BRACKET=19, TYPE_ANNOTATION=20, TEXT_TYPE_ANNOTATION=21, 
		TIMESTAMP_TYPE_ANNOTATION=22, IDENTIFIER=23, NUMBER=24, EVALUATION_LITERAL_1_OPENING_DELIMITER=25, 
		EVALUATION_LITERAL_2_OPENING_DELIMITER=26;
	public const int
		EVALUATION_LITERAL_1_MODE=1, EVALUATION_LITERAL_2_MODE=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "EVALUATION_LITERAL_1_MODE", "EVALUATION_LITERAL_2_MODE"
	};

	public static readonly string[] ruleNames = {
		"WHITESPACE", "AND", "OR", "LEFT_PAREN", "RIGHT_PAREN", "TIMES", "DIVIDED_BY", 
		"PLUS", "MINUS", "EQUAL", "NOT_EQUAL", "LESS_THAN", "LESS_THAN_OR_EQUAL", 
		"GREATER_THAN_OR_EQUAL", "GREATER_THAN", "COMMA", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"TYPE_ANNOTATION", "TEXT_TYPE_ANNOTATION", "TIMESTAMP_TYPE_ANNOTATION", 
		"IDENTIFIER", "NUMBER", "LETTER", "DIGIT", "MANTISSA_PART", "EXPONENT_PART", 
		"DECIMAL_PART", "NATURAL_NUMBER", "EVALUATION_LITERAL_1_OPENING_DELIMITER", 
		"EVALUATION_LITERAL_2_OPENING_DELIMITER", "EVALUATION_LITERAL_1_CLOSING_DELIMITER", 
		"EVALUATION_LITERAL_1_CONTENT", "EVALUATION_LITERAL_2_CLOSING_DELIMITER", 
		"EVALUATION_LITERAL_2_CONTENT"
	};


	public CalculateEvaluateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalculateEvaluateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'('", "')'", "'*'", "'/'", "'+'", "'-'", 
		"'='", "'<>'", "'<'", "'<='", "'>='", "'>'", "','", "'['", "']'", null, 
		"'@'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EVALUATION_LITERAL", "WHITESPACE", "AND", "OR", "LEFT_PAREN", "RIGHT_PAREN", 
		"TIMES", "DIVIDED_BY", "PLUS", "MINUS", "EQUAL", "NOT_EQUAL", "LESS_THAN", 
		"LESS_THAN_OR_EQUAL", "GREATER_THAN_OR_EQUAL", "GREATER_THAN", "COMMA", 
		"LEFT_BRACKET", "RIGHT_BRACKET", "TYPE_ANNOTATION", "TEXT_TYPE_ANNOTATION", 
		"TIMESTAMP_TYPE_ANNOTATION", "IDENTIFIER", "NUMBER", "EVALUATION_LITERAL_1_OPENING_DELIMITER", 
		"EVALUATION_LITERAL_2_OPENING_DELIMITER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CalculateEvaluateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculateEvaluateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x1C', '\xC3', '\b', '\x1', '\b', '\x1', '\b', '\x1', 
		'\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', 
		'\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', 
		'\t', '\a', '\x4', '\b', '\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', 
		'\t', '\n', '\x4', '\v', '\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', 
		'\t', '\r', '\x4', '\xE', '\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', 
		'\x10', '\t', '\x10', '\x4', '\x11', '\t', '\x11', '\x4', '\x12', '\t', 
		'\x12', '\x4', '\x13', '\t', '\x13', '\x4', '\x14', '\t', '\x14', '\x4', 
		'\x15', '\t', '\x15', '\x4', '\x16', '\t', '\x16', '\x4', '\x17', '\t', 
		'\x17', '\x4', '\x18', '\t', '\x18', '\x4', '\x19', '\t', '\x19', '\x4', 
		'\x1A', '\t', '\x1A', '\x4', '\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', 
		'\x1C', '\x4', '\x1D', '\t', '\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', 
		'\x1F', '\t', '\x1F', '\x4', ' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', 
		'\"', '\t', '\"', '\x4', '#', '\t', '#', '\x4', '$', '\t', '$', '\x3', 
		'\x2', '\x6', '\x2', 'M', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 'N', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '}', '\n', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\a', '\x17', '\x86', '\n', '\x17', '\f', '\x17', 
		'\xE', '\x17', '\x89', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x8D', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x95', '\n', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x98', '\n', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x9C', '\n', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x6', 
		'\x1E', '\xA4', '\n', '\x1E', '\r', '\x1E', '\xE', '\x1E', '\xA5', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x2', '\x2', '%', 
		'\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', 
		'\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', 
		'\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', 
		'\x13', '%', '\x14', '\'', '\x15', ')', '\x16', '+', '\x17', '-', '\x18', 
		'/', '\x19', '\x31', '\x1A', '\x33', '\x2', '\x35', '\x2', '\x37', '\x2', 
		'\x39', '\x2', ';', '\x2', '=', '\x2', '?', '\x1B', '\x41', '\x1C', '\x43', 
		'\x2', '\x45', '\x2', 'G', '\x2', 'I', '\x2', '\x5', '\x2', '\x3', '\x4', 
		'\f', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x4', '\x2', 
		'\x43', '\x43', '\x63', '\x63', '\x4', '\x2', 'P', 'P', 'p', 'p', '\x4', 
		'\x2', '\x46', '\x46', '\x66', '\x66', '\x4', '\x2', 'Q', 'Q', 'q', 'q', 
		'\x4', '\x2', 'T', 'T', 't', 't', '\x5', '\x2', '\x43', '\\', '\x61', 
		'\x61', '\x63', '|', '\x3', '\x2', '\x32', ';', '\x4', '\x2', 'G', 'G', 
		'g', 'g', '\x4', '\x2', '-', '-', '/', '/', '\x2', '\xC3', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x2', ')', '\x3', '\x2', '\x2', '\x2', '\x2', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '-', '\x3', '\x2', '\x2', '\x2', '\x2', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x31', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x2', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\x43', '\x3', '\x2', '\x2', '\x2', '\x3', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x4', 'G', '\x3', '\x2', '\x2', '\x2', '\x4', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x5', 'L', '\x3', '\x2', '\x2', '\x2', '\a', 'R', 
		'\x3', '\x2', '\x2', '\x2', '\t', 'V', '\x3', '\x2', '\x2', '\x2', '\v', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\r', '[', '\x3', '\x2', '\x2', '\x2', 
		'\xF', ']', '\x3', '\x2', '\x2', '\x2', '\x11', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x61', '\x3', '\x2', '\x2', '\x2', '\x15', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x65', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x1B', 'j', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', 'l', '\x3', '\x2', '\x2', '\x2', '\x1F', 'o', '\x3', '\x2', '\x2', 
		'\x2', '!', 'r', '\x3', '\x2', '\x2', '\x2', '#', 't', '\x3', '\x2', '\x2', 
		'\x2', '%', 'v', '\x3', '\x2', '\x2', '\x2', '\'', 'x', '\x3', '\x2', 
		'\x2', '\x2', ')', '|', '\x3', '\x2', '\x2', '\x2', '+', '~', '\x3', '\x2', 
		'\x2', '\x2', '-', '\x80', '\x3', '\x2', '\x2', '\x2', '/', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x35', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x97', '\x3', '\x2', '\x2', '\x2', '\x39', '\x99', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x9F', '\x3', '\x2', '\x2', '\x2', '=', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '?', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\x43', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\xB6', '\x3', '\x2', '\x2', '\x2', 'G', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', 'I', '\xBF', '\x3', '\x2', '\x2', '\x2', 'K', 'M', 
		'\t', '\x2', '\x2', '\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 
		'N', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\b', '\x2', '\x2', '\x2', 'Q', '\x6', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\t', '\x3', '\x2', '\x2', 'S', 'T', '\t', '\x4', '\x2', 
		'\x2', 'T', 'U', '\t', '\x5', '\x2', '\x2', 'U', '\b', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\t', '\x6', '\x2', '\x2', 'W', 'X', '\t', '\a', '\x2', 
		'\x2', 'X', '\n', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '*', '\x2', 
		'\x2', 'Z', '\f', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '+', '\x2', 
		'\x2', '\\', '\xE', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', ',', '\x2', 
		'\x2', '^', '\x10', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\x31', 
		'\x2', '\x2', '`', '\x12', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', 
		'\a', '-', '\x2', '\x2', '\x62', '\x14', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\a', '/', '\x2', '\x2', '\x64', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x66', '\a', '?', '\x2', '\x2', '\x66', '\x18', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\a', '>', '\x2', '\x2', 'h', 'i', '\a', 
		'@', '\x2', '\x2', 'i', '\x1A', '\x3', '\x2', '\x2', '\x2', 'j', 'k', 
		'\a', '>', '\x2', '\x2', 'k', '\x1C', '\x3', '\x2', '\x2', '\x2', 'l', 
		'm', '\a', '>', '\x2', '\x2', 'm', 'n', '\a', '?', '\x2', '\x2', 'n', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\a', '@', '\x2', '\x2', 
		'p', 'q', '\a', '?', '\x2', '\x2', 'q', ' ', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\a', '@', '\x2', '\x2', 's', '\"', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\a', '.', '\x2', '\x2', 'u', '$', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\a', ']', '\x2', '\x2', 'w', '&', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\a', '_', '\x2', '\x2', 'y', '(', '\x3', '\x2', '\x2', '\x2', 
		'z', '}', '\x5', '+', '\x15', '\x2', '{', '}', '\x5', '-', '\x16', '\x2', 
		'|', 'z', '\x3', '\x2', '\x2', '\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', 
		'}', '*', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\a', '\x42', '\x2', 
		'\x2', '\x7F', ',', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\a', 
		'&', '\x2', '\x2', '\x81', '.', '\x3', '\x2', '\x2', '\x2', '\x82', '\x87', 
		'\x5', '\x33', '\x19', '\x2', '\x83', '\x86', '\x5', '\x33', '\x19', '\x2', 
		'\x84', '\x86', '\x5', '\x35', '\x1A', '\x2', '\x85', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', 
		'\x5', '\x37', '\x1B', '\x2', '\x8B', '\x8D', '\x5', '\x39', '\x1C', '\x2', 
		'\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x32', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', 
		'\t', '\b', '\x2', '\x2', '\x8F', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x91', '\t', '\t', '\x2', '\x2', '\x91', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x94', '\x5', '=', '\x1E', '\x2', '\x93', '\x95', 
		'\x5', ';', '\x1D', '\x2', '\x94', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x98', '\x5', ';', '\x1D', '\x2', '\x97', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x38', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9B', '\t', '\n', 
		'\x2', '\x2', '\x9A', '\x9C', '\t', '\v', '\x2', '\x2', '\x9B', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x5', '=', 
		'\x1E', '\x2', '\x9E', ':', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', 
		'\a', '\x30', '\x2', '\x2', '\xA0', '\xA1', '\x5', '=', '\x1E', '\x2', 
		'\xA1', '<', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA4', '\x5', '\x35', 
		'\x1A', '\x2', '\xA3', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '>', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA8', '\a', ')', '\x2', '\x2', '\xA8', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\b', '\x1F', '\x3', '\x2', 
		'\xAA', '\xAB', '\b', '\x1F', '\x4', '\x2', '\xAB', '@', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xAD', '\a', '~', '\x2', '\x2', '\xAD', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\b', ' ', '\x3', '\x2', '\xAF', 
		'\xB0', '\b', ' ', '\x5', '\x2', '\xB0', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\a', ')', '\x2', '\x2', '\xB2', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB4', '\b', '!', '\x6', '\x2', '\xB4', 
		'\xB5', '\b', '!', '\a', '\x2', '\xB5', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\xB7', '\v', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xB9', '\b', '\"', '\x3', '\x2', '\xB9', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', '~', '\x2', '\x2', '\xBB', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\b', '#', '\x6', 
		'\x2', '\xBD', '\xBE', '\b', '#', '\a', '\x2', '\xBE', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\xBF', '\xC0', '\v', '\x2', '\x2', '\x2', '\xC0', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\b', '$', '\x3', '\x2', '\xC2', 
		'J', '\x3', '\x2', '\x2', '\x2', '\xE', '\x2', '\x3', '\x4', 'N', '|', 
		'\x85', '\x87', '\x8C', '\x94', '\x97', '\x9B', '\xA5', '\b', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x2', '\a', '\x3', '\x2', '\a', '\x4', '\x2', '\x6', 
		'\x2', '\x2', '\t', '\x3', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AppliedResearchAssociates.CalculateEvaluate
